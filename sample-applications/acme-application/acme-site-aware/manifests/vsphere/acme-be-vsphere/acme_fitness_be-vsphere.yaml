---
apiVersion: v1
kind: Service
metadata:
  name: cart-redis
  labels:
    app: cart-redis
    service: cart-redis
spec:
  ports:
    - port: 6379
      name: tcp-redis-cart
  selector:
    app: cart-redis
    service: cart-redis
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cart-redis
  labels:
    app: cart-redis
    service: cart-redis
spec:
  selector:
    matchLabels:
      app: cart-redis  # has to match .spec.template.metadata.labels
      service: cart-redis
  replicas: 1
  template:
    metadata:
      labels:
        app: cart-redis  # has to match .spec.selector.matchLabels
        service: cart-redis
    spec:
      containers:
        - name: cart-redis
          image: redis:5.0.3-alpine
          command:
            - "redis-server"
          imagePullPolicy: Always
          resources:
            requests:
              cpu: "100m"
              memory: "100Mi"
          ports:
            - name: tcp-redis
              containerPort: 6379
              protocol: "TCP"
          env:
          - name: REDIS-HOST
            value: 'cart-redis'
          - name: REDIS_PASS
            valueFrom:
              secretKeyRef:
                name: redis-pass
                key: password
          volumeMounts:
            - mountPath: /var/lib/redis
              name: redis-data
#            - mountPath: /etc/redis
#              name: redis-config
      volumes:
        - name: redis-data
          emptyDir: {}
#        - name: redis-config
#          configMap:
#            name: redis-config
#            items:
#              - key: redis-config
#                path: redis.conf
---
apiVersion: v1
kind: Service
metadata:
  name: cart
  labels:
    app: cart
    service: cart
spec:
  ports:
    - name: http-cart
      protocol: TCP
      port: 5000
  selector:
    app: cart
    service: cart
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cart
  labels:
    app: cart
    service: cart
spec:
  selector:
    matchLabels:
      app: cart
      service: cart
  strategy:
    type: Recreate
  replicas: 1
  template:
    metadata:
      labels:
        app: cart
        service: cart
    spec:
      volumes:
      - name: cart-data
        emptyDir: {}
      containers:
      - image: gcr.io/vmwarecloudadvocacy/acmeshop-cart:1.0.0
        name: cart
        env:
        - name: REDIS_HOST
          value: 'cart-redis'
        - name: REDIS_PASS
          valueFrom:
            secretKeyRef:
              name: redis-pass
              key: password
        - name: REDIS_PORT
          value: '6379'
        - name: CART_PORT
          value: '5000'
        ports:
        - containerPort: 5000
          name: http-cart
        volumeMounts:
        - mountPath: "/data"
          name: "cart-data"
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "500m"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: catalog-initdb-config
data:
  seed.js: |
    db.catalog.insertMany([
      {"name":"Yoga Mat","shortdescription":"Magic Yoga Mat!","description":"Our Yoga Mat is magic. You will twist into a human pretzel with the greatest of ease. Never done Yoga before? This mat will turn you into an instant professional with barely any work. Itâ€™s the American way!. Namaste!","imageurl1":"/static/images/yogamat_square.jpg","imageurl2":"/static/images/yogamat_thumb2.jpg","imageurl3":"/static/images/yogamat_thumb3.jpg","price":62.5,"tags":["mat"]}
      ,{"name":"Water Bottle","shortdescription":"The last Water Bottle you'll ever buy!","description":"Our Water Bottle only has to be filled once! That's right. ONCE. Unlimited water, for the rest of your life. Doesn't that $34.99 seem a lot more reasonable now? Stop buying all those other water bottles that you have to keep refilling like a sucker. Get the ACME bottle today!","imageurl1":"/static/images/bottle_square.jpg","imageurl2":"/static/images/bottle_thumb2.jpg","imageurl3":"/static/images/bottle_thumb3.jpg","price":34.9900016784668,"tags":["bottle"]}
      ,{"name":"Fit Bike","shortdescription":"Get Light on our Fit Bike!", "description":"Ride like the wind on your very own ACME Fit Bike. Have you ever wanted to travel as fast as a MotoGP racer on a bicycle with tiny tires?! Me too! Get the Fit Bike, and you'll vroom your way into fitness in 30 seconds flat!","imageurl1":"/static/images/bicycle_square.jpg","imageurl2":"/static/images/bicycle_thumb2.jpg","imageurl3":"/static/images/bicycle_thumb3.jpg", "price":499.99,"tags":["bicycle"]}
      ,{"name":"Basket Ball","shortdescription":"World's Roundest Basketball!","description":"That's right. You heard me correctly. The worlds ROUNDEST basketball. Are you tired of your current basketball simply not being round enough. Then it's time to step up to the ACME Basketball. Get your round on!","imageurl1":"/static/images/basketball_square.jpg","imageurl2":"/static/images/basketball_thumb2.jpg","imageurl3":"/static/images/basketball_thumb3.jpg","price":110.75,"tags":["basketball"]}
      ,{"name":"Smart Watch","shortdescription":"The watch that makes you smarter!","description":"Do you have trouble remembering things? Can you not remember what day it is? Do you need a robot with a cute women's voice to tell you when to stand up and walk around? Then boy do we have the watch for you! Get the ACME Smart Watch, and never have to remember anything ever again!","imageurl1":"/static/images/smartwatch_square.jpg","imageurl2":"/static/images/smartwatch_thumb2.jpg","imageurl3":"/static/images/smartwatch_thumb3.jpg","price":399.5899963378906,"tags":["watch"]}
      ,{"name":"Red Pants","shortdescription":"Because who doesn't need red pants??", "description":"Have you found yourself walking around tech conferences in the same old jeans and vendor t-shirt? Do you need to up your pants game? ACME Red Pants are 100% GUARANTEED to take you to a whole new level. Women will want to meet you. Men will want to be you. You are... Fancy Pants. What are you waiting for??","imageurl1":"/static/images/redpants_square.jpg","imageurl2":"/static/images/redpants_thumb2.jpg","imageurl3":"/static/images/redpants_thumb3.jpg", "price":99.0,"tags":["clothing"]}
      ,{"name":"Running shoes","shortdescription":"Mama says they was magic shoes!", "description":"And she was right! Are you slow? Out of shape? But still ready to take on Usain Bolt in the 100? Then strap up your ACME Running Shoes and Run Forest, Run! These shoes will make you run the 100 in 2.5 flat!","imageurl1":"/static/images/shoes_square.jpg","imageurl2":"/static/images/shoes_thumb2.jpg","imageurl3":"/static/images/shoes_thumb3.jpg", "price":120.00,"tags":["running"]}
      ,{"name":"Weights","shortdescription":"Get ripped without breaking a sweat!","description":"Are you ready to get Pumped Up with Hanz and Franz? Or get swole like Arnold? It's time to hit the Add to Cart button on the ACME Weights. Just 45 seconds a day, 3 days a week, and you'll be showing those Muscle Beach clowns how it's done in no time!","imageurl1":"/static/images/weights_square.jpg","imageurl2":"/static/images/weights_thumb2.jpg","imageurl3":"/static/images/weights_thumb3.jpg", "price":49.99,"tags":["weight"]} ]);
---
apiVersion: v1
kind: Service
metadata:
  name: catalog-mongo
  labels:
    app: catalog-mongo
    service: catalog-mongo
spec:
  ports:
    - port: 27017
      name: mongo-catalog
      protocol: TCP
  selector:
    app: catalog-mongo
    service: catalog-mongo
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: catalog-mongo
  labels:
    app: catalog-mongo
    service: catalog-mongo
spec:
  selector:
    matchLabels:
      app: catalog-mongo  # has to match .spec.template.metadata.labels
      service: catalog-mongo
  replicas: 1
  template:
    metadata:
      labels:
        app: catalog-mongo  # has to match .spec.selector.matchLabels
        service: catalog-mongo
    spec:
      containers:
        - name: catalog-mongo
          image: mongo:4
          resources:
            {}
          ports:
            - name: mongo-catalog
              containerPort: 27017
              protocol: "TCP"
          env:
          - name: MONGO_INITDB_ROOT_USERNAME
            value: 'mongoadmin'
          - name: MONGO_INITDB_DATABASE
            value: 'acmefit'
          - name: MONGO_INITDB_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: catalog-mongo-pass
                key: password
          volumeMounts:
            - mountPath: /data/db
              name: mongodata
            - mountPath: /docker-entrypoint-initdb.d
              name: mongo-initdb
      volumes:
        - name: mongodata
          emptyDir: {}
        - name: mongo-initdb
          configMap:
            name: catalog-initdb-config
#        - name: mongodata
#          persistentVolumeClaim:
#            claimName: mongodata
---
apiVersion: v1
kind: Service
metadata:
  name: catalog
  labels:
    app: catalog
    service: catalog
spec:
  ports:
    - name: http-catalog
      protocol: TCP
      port: 8082
  selector:
    app: catalog
    service: catalog
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: catalog
  labels:
    app: catalog
    service: catalog
    version: v1
spec:
  selector:
    matchLabels:
      app: catalog
      service: catalog
      version: v1
  strategy:
    type: Recreate
  replicas: 1
  template:
    metadata:
      labels:
        app: catalog
        service: catalog
        version: v1
    spec:
      volumes:
      - name: catalog-data
        emptyDir: {}
      containers:
      - image: harbor.tanzuworld.com/niran-acme/catalog-vsphere:v0.2
        name: catalog
        env:
        - name: CATALOG_DB_HOST
          value: 'catalog-mongo'
        - name: CATALOG_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: catalog-mongo-pass
              key: password
        - name: CATALOG_DB_PORT
          value: '27017'
        - name: CATALOG_DB_USERNAME
          value: 'mongoadmin'
        - name: CATALOG_PORT
          value: '8082'
        ports:
        - containerPort: 8082
          name: http-catalog
        volumeMounts:
        - mountPath: "/data"
          name: "catalog-data"
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "500m"
---
apiVersion: v1
kind: Service
metadata:
  name: order-mongo
  labels:
    app: order-mongo
    service: order-mongo
spec:
  ports:
    - port: 27017
      name: mongo-order
      protocol: TCP
  selector:
    app: order-mongo
    service: order-mongo
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-mongo
  labels:
    app: order-mongo
    service: order-mongo
spec:
  selector:
    matchLabels:
      app: order-mongo  # has to match .spec.template.metadata.labels
      service: order-mongo
  replicas: 1
  template:
    metadata:
      labels:
        app: order-mongo  # has to match .spec.selector.matchLabels
        service: order-mongo
    spec:
      containers:
        - name: order-mongo
          image: mongo:4
          resources:
            {}
          ports:
            - name: mongo-order
              containerPort: 27017
              protocol: "TCP"
          env:
          - name: MONGO_INITDB_ROOT_USERNAME
            value: 'mongoadmin'
          - name: MONGO_INITDB_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: order-mongo-pass
                key: password
          volumeMounts:
            - mountPath: /data/db
              name: mongodata
      volumes:
        - name: mongodata
          emptyDir: {}
#        - name: mongodata
#          persistentVolumeClaim:
#            claimName: mongodata
---
apiVersion: v1
kind: Service
metadata:
  name: order
  labels:
    app: order
    service: order
spec:
  ports:
    - name: http-order
      protocol: TCP
      port: 6000
  selector:
    app: order
    service: order
---
apiVersion: apps/v1 # for versions before 1.8.0 use apps/v1beta1
kind: Deployment
metadata:
  name: order
  labels:
    app: order
    service: order
spec:
  selector:
    matchLabels:
      app: order
      service: order
  strategy:
    type: Recreate
  replicas: 1
  template:
    metadata:
      labels:
        app: order
        service: order
    spec:
      volumes:
      - name: order-data
        emptyDir: {}
      containers:
      - image: gcr.io/vmwarecloudadvocacy/acmeshop-order:1.0.1
        name: order
        env:
        - name: ORDER_DB_HOST
          value: 'order-mongo'
        - name: ORDER_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: order-mongo-pass
              key: password
        - name: ORDER_DB_PORT
          value: '27017'
        - name: ORDER_DB_USERNAME
          value: 'mongoadmin'
        - name: ORDER_PORT
          value: '6000'
        - name: PAYMENT_PORT
          value: '9000'
        - name: PAYMENT_HOST
          value: 'payment'
        ports:
        - containerPort: 6000
          name: http-order
        volumeMounts:
        - mountPath: "/data"
          name: "order-data"
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "500m"
---
apiVersion: v1
kind: Service
metadata:
  name: payment
  labels:
    app: payment
    service: payment
spec:
  ports:
    - name: http-payment
      protocol: TCP
      port: 9000
  selector:
    app: payment
    service: payment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: payment
  labels:
    app: payment
    service: payment
spec:
  selector:
    matchLabels:
      app: payment
      service: payment
  strategy:
    type: Recreate
  replicas: 1
  template:
    metadata:
      labels:
        app: payment
        service: payment
    spec:
      containers:
      - image: gcr.io/vmwarecloudadvocacy/acmeshop-payment:1.0.0
        name: payment
        env:
        - name: PAYMENT_PORT
          value: '9000'
        ports:
        - containerPort: 9000
          name: http-payment
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: users-initdb-config
data:
  seed.js: |
    db.users.insertMany([
    {"firstname":"Walter","lastname":"White","email":"walter@acmefitness.com","username":"walter","password":"6837ea9b06409112a824d113927ad74fabc5c76e","salt":""}
    ,{"firstname":"Dwight","lastname":"Schrute","email":"dwight@acmefitness.com","username":"dwight","password":"6837ea9b06409112a824d113927ad74fabc5c76e","salt":""}
    ,{"firstname":"Eric","lastname":"Cartman","email":"eric@acmefitness.com","username":"eric","password":"6837ea9b06409112a824d113927ad74fabc5c76e","salt":""}
    ,{"firstname":"Han","lastname":"Solo","email":"han@acmefitness.com","username":"han","password":"6837ea9b06409112a824d113927ad74fabc5c76e","salt":""}
    ,{"firstname":"Phoebe","lastname":"Buffay","email":"phoebe@acmefitness.com","username":"phoebe","password":"6837ea9b06409112a824d113927ad74fabc5c76e","salt":""}
    ,{"firstname":"Elaine","lastname":"Benes","email":"elaine@acmefitness.com","username":"elaine","password":"6837ea9b06409112a824d113927ad74fabc5c76e","salt":""}
    ]);
---
apiVersion: v1
kind: Service
metadata:
  name: users-mongo
  labels:
    app: users-mongo
    service: users-mongo
spec:
  ports:
    - port: 27017
      name: mongo-users
      protocol: TCP
  selector:
    app: users-mongo
    service: users-mongo
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: users-mongo
  labels:
    app: users-mongo
    service: users-db
spec:
  selector:
    matchLabels:
      app: users-mongo  # has to match .spec.template.metadata.labels
      service: users-mongo
  replicas: 1
  template:
    metadata:
      labels:
        app: users-mongo  # has to match .spec.selector.matchLabels
        service: users-mongo
    spec:
      containers:
        - name: users-mongo
          image: mongo:4
          resources:
            {}
          ports:
            - name: mongo-users
              containerPort: 27017
              protocol: "TCP"
          env:
          - name: MONGO_INITDB_ROOT_USERNAME
            value: 'mongoadmin'
          - name: MONGO_INITDB_DATABASE
            value: 'acmefit'
          - name: MONGO_INITDB_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: users-mongo-pass
                key: password
          volumeMounts:
            - mountPath: /data/db
              name: mongodata
            - mountPath: /docker-entrypoint-initdb.d
              name: mongo-initdb
      volumes:
        - name: mongodata
          emptyDir: {}
        - name: mongo-initdb
          configMap:
            name: users-initdb-config
#        - name: mongodata
#          persistentVolumeClaim:
#            claimName: mongodata
---
apiVersion: v1
kind: Service
metadata:
  name: users
  labels:
    app: users
    service: users
spec:
  ports:
    - name: http-users
      protocol: TCP
      port: 8081
  selector:
    app: users
    service: users
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: users
  labels:
    app: users
    service: users
spec:
  selector:
    matchLabels:
      app: users
      service: users
  strategy:
    type: Recreate
  replicas: 1
  template:
    metadata:
      labels:
        app: users
        service: users
    spec:
      volumes:
      - name: users-data
        emptyDir: {}
      containers:
      - image: gcr.io/vmwarecloudadvocacy/acmeshop-user:1.0.0
        name: users
        env:
        - name: USERS_DB_HOST
          value: 'users-mongo'
        - name: USERS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: users-mongo-pass
              key: password
        - name: USERS_DB_PORT
          value: '27017'
        - name: USERS_DB_USERNAME
          value: 'mongoadmin'
        - name: USERS_PORT
          value: '8081'
        ports:
        - containerPort: 8081
          name: http-users
        volumeMounts:
        - mountPath: "/data"
          name: "users-data"
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "500m"
---
