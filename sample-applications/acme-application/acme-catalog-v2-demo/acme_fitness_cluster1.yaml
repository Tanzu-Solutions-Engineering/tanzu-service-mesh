---
apiVersion: v1
kind: Service
metadata:
  name: cart-redis
  labels:
    app: cart-redis
    service: cart-redis
spec:
  ports:
    - port: 6379
      name: tcp-redis-cart
  selector:
    app: cart-redis
    service: cart-redis
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cart-redis
  labels:
    app: cart-redis
    service: cart-redis
spec:
  selector:
    matchLabels:
      app: cart-redis  # has to match .spec.template.metadata.labels
      service: cart-redis
  replicas: 1
  template:
    metadata:
      labels:
        app: cart-redis  # has to match .spec.selector.matchLabels
        service: cart-redis
    spec:
      containers:
        - name: cart-redis
          image: redis:5.0.3-alpine
          command:
            - "redis-server"
          imagePullPolicy: Always
          resources:
            requests:
              cpu: "100m"
              memory: "100Mi"
          ports:
            - name: tcp-redis
              containerPort: 6379
              protocol: "TCP"
          env:
          - name: REDIS-HOST
            value: 'cart-redis'
          - name: REDIS_PASS
            valueFrom:
              secretKeyRef:
                name: redis-pass
                key: password
          volumeMounts:
            - mountPath: /var/lib/redis
              name: redis-data
#            - mountPath: /etc/redis
#              name: redis-config
      volumes:
        - name: redis-data
          emptyDir: {}
#        - name: redis-config
#          configMap:
#            name: redis-config
#            items:
#              - key: redis-config
#                path: redis.conf
---
apiVersion: v1
kind: Service
metadata:
  name: cart
  labels:
    app: cart
    service: cart
spec:
  ports:
    - name: http-cart
      protocol: TCP
      port: 5000
  selector:
    app: cart
    service: cart
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cart
  labels:
    app: cart
    service: cart
spec:
  selector:
    matchLabels:
      app: cart
      service: cart
  strategy:
    type: Recreate
  replicas: 1
  template:
    metadata:
      labels:
        app: cart
        service: cart
    spec:
      volumes:
      - name: cart-data
        emptyDir: {}
      containers:
      - image: gcr.io/vmwarecloudadvocacy/acmeshop-cart:1.0.0
        name: cart
        env:
        - name: REDIS_HOST
          value: 'cart-redis'
        - name: REDIS_PASS
          valueFrom:
            secretKeyRef:
              name: redis-pass
              key: password
        - name: REDIS_PORT
          value: '6379'
        - name: CART_PORT
          value: '5000'
        ports:
        - containerPort: 5000
          name: http-cart
        volumeMounts:
        - mountPath: "/data"
          name: "cart-data"
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "500m"
---
apiVersion: v1
kind: Service
metadata:
  name: shopping
  labels:
    app: shopping
    service: shopping
spec:
  ports:
    - name: http-shopping
      protocol: TCP
      port: 3000
  selector:
    app: shopping
    service: shopping
---
apiVersion: apps/v1 # for versions before 1.8.0 use apps/v1beta1
kind: Deployment
metadata:
  name: shopping
  labels:
    app: shopping
    service: shopping
spec:
  selector:
    matchLabels:
      app: shopping
      service: shopping
  strategy:
    type: Recreate
  replicas: 1
  template:
    metadata:
      labels:
        app: shopping
        service: shopping
    spec:
      containers:
      - image: gcr.io/vmwarecloudadvocacy/acmeshop-front-end:rel1
        name: shopping
        env:
        - name: FRONTEND_PORT
          value: '3000'
        - name: USERS_HOST
          value: 'users'
        - name: CATALOG_HOST
          value: 'catalog.acme.com'
        - name: ORDER_HOST
          value: 'order'
        - name: CART_HOST
          value: 'cart'
        - name: USERS_PORT
          value: '8081'
        - name: CATALOG_PORT
          value: '8082'
        - name: CART_PORT
          value: '5000'
        - name: ORDER_PORT
          value: '6000'
        ports:
        - containerPort: 3000
          name: http-shopping
---
apiVersion: v1
kind: Service
metadata:
  name: order-mongo
  labels:
    app: order-mongo
    service: order-mongo
spec:
  ports:
    - port: 27017
      name: mongo-order
      protocol: TCP
  selector:
    app: order-mongo
    service: order-mongo
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-mongo
  labels:
    app: order-mongo
    service: order-mongo
spec:
  selector:
    matchLabels:
      app: order-mongo  # has to match .spec.template.metadata.labels
      service: order-mongo
  replicas: 1
  template:
    metadata:
      labels:
        app: order-mongo  # has to match .spec.selector.matchLabels
        service: order-mongo
    spec:
      containers:
        - name: order-mongo
          image: mongo:4
          resources:
            {}
          ports:
            - name: mongo-order
              containerPort: 27017
              protocol: "TCP"
          env:
          - name: MONGO_INITDB_ROOT_USERNAME
            value: 'mongoadmin'
          - name: MONGO_INITDB_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: order-mongo-pass
                key: password
          volumeMounts:
            - mountPath: /data/db
              name: mongodata
      volumes:
        - name: mongodata
          emptyDir: {}
#        - name: mongodata
#          persistentVolumeClaim:
#            claimName: mongodata
---
apiVersion: v1
kind: Service
metadata:
  name: order
  labels:
    app: order
    service: order
spec:
  ports:
    - name: http-order
      protocol: TCP
      port: 6000
  selector:
    app: order
    service: order
---
apiVersion: apps/v1 # for versions before 1.8.0 use apps/v1beta1
kind: Deployment
metadata:
  name: order
  labels:
    app: order
    service: order
spec:
  selector:
    matchLabels:
      app: order
      service: order
  strategy:
    type: Recreate
  replicas: 1
  template:
    metadata:
      labels:
        app: order
        service: order
    spec:
      volumes:
      - name: order-data
        emptyDir: {}
      containers:
      - image: gcr.io/vmwarecloudadvocacy/acmeshop-order:1.0.1
        name: order
        env:
        - name: ORDER_DB_HOST
          value: 'order-mongo'
        - name: ORDER_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: order-mongo-pass
              key: password
        - name: ORDER_DB_PORT
          value: '27017'
        - name: ORDER_DB_USERNAME
          value: 'mongoadmin'
        - name: ORDER_PORT
          value: '6000'
        - name: PAYMENT_PORT
          value: '9000'
        - name: PAYMENT_HOST
          value: 'payment'
        ports:
        - containerPort: 6000
          name: http-order
        volumeMounts:
        - mountPath: "/data"
          name: "order-data"
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "500m"
---
apiVersion: v1
kind: Service
metadata:
  name: payment
  labels:
    app: payment
    service: payment
spec:
  ports:
    - name: http-payment
      protocol: TCP
      port: 9000
  selector:
    app: payment
    service: payment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: payment
  labels:
    app: payment
    service: payment
spec:
  selector:
    matchLabels:
      app: payment
      service: payment
  strategy:
    type: Recreate
  replicas: 1
  template:
    metadata:
      labels:
        app: payment
        service: payment
    spec:
      containers:
      - image: gcr.io/vmwarecloudadvocacy/acmeshop-payment:1.0.0
        name: payment
        env:
        - name: PAYMENT_PORT
          value: '9000'
        ports:
        - containerPort: 9000
          name: http-payment
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: users-initdb-config
data:
  seed.js: |
    db.users.insertMany([
    {"firstname":"Walter","lastname":"White","email":"walter@acmefitness.com","username":"walter","password":"6837ea9b06409112a824d113927ad74fabc5c76e","salt":""}
    ,{"firstname":"Dwight","lastname":"Schrute","email":"dwight@acmefitness.com","username":"dwight","password":"6837ea9b06409112a824d113927ad74fabc5c76e","salt":""}
    ,{"firstname":"Eric","lastname":"Cartman","email":"eric@acmefitness.com","username":"eric","password":"6837ea9b06409112a824d113927ad74fabc5c76e","salt":""}
    ,{"firstname":"Han","lastname":"Solo","email":"han@acmefitness.com","username":"han","password":"6837ea9b06409112a824d113927ad74fabc5c76e","salt":""}
    ,{"firstname":"Phoebe","lastname":"Buffay","email":"phoebe@acmefitness.com","username":"phoebe","password":"6837ea9b06409112a824d113927ad74fabc5c76e","salt":""}
    ,{"firstname":"Elaine","lastname":"Benes","email":"elaine@acmefitness.com","username":"elaine","password":"6837ea9b06409112a824d113927ad74fabc5c76e","salt":""}
    ]);
---
apiVersion: v1
kind: Service
metadata:
  name: users-mongo
  labels:
    app: users-mongo
    service: users-mongo
spec:
  ports:
    - port: 27017
      name: mongo-users
      protocol: TCP
  selector:
    app: users-mongo
    service: users-mongo
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: users-mongo
  labels:
    app: users-mongo
    service: users-db
spec:
  selector:
    matchLabels:
      app: users-mongo  # has to match .spec.template.metadata.labels
      service: users-mongo
  replicas: 1
  template:
    metadata:
      labels:
        app: users-mongo  # has to match .spec.selector.matchLabels
        service: users-mongo
    spec:
      containers:
        - name: users-mongo
          image: mongo:4
          resources:
            {}
          ports:
            - name: mongo-users
              containerPort: 27017
              protocol: "TCP"
          env:
          - name: MONGO_INITDB_ROOT_USERNAME
            value: 'mongoadmin'
          - name: MONGO_INITDB_DATABASE
            value: 'acmefit'
          - name: MONGO_INITDB_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: users-mongo-pass
                key: password
          volumeMounts:
            - mountPath: /data/db
              name: mongodata
            - mountPath: /docker-entrypoint-initdb.d
              name: mongo-initdb
      volumes:
        - name: mongodata
          emptyDir: {}
        - name: mongo-initdb
          configMap:
            name: users-initdb-config
#        - name: mongodata
#          persistentVolumeClaim:
#            claimName: mongodata
---
apiVersion: v1
kind: Service
metadata:
  name: users
  labels:
    app: users
    service: users
spec:
  ports:
    - name: http-users
      protocol: TCP
      port: 8081
  selector:
    app: users
    service: users
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: users
  labels:
    app: users
    service: users
spec:
  selector:
    matchLabels:
      app: users
      service: users
  strategy:
    type: Recreate
  replicas: 1
  template:
    metadata:
      labels:
        app: users
        service: users
    spec:
      volumes:
      - name: users-data
        emptyDir: {}
      containers:
      - image: gcr.io/vmwarecloudadvocacy/acmeshop-user:1.0.0
        name: users
        env:
        - name: USERS_DB_HOST
          value: 'users-mongo'
        - name: USERS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: users-mongo-pass
              key: password
        - name: USERS_DB_PORT
          value: '27017'
        - name: USERS_DB_USERNAME
          value: 'mongoadmin'
        - name: USERS_PORT
          value: '8081'
        ports:
        - containerPort: 8081
          name: http-users
        volumeMounts:
        - mountPath: "/data"
          name: "users-data"
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "500m"
---
